---
description: 
globs: *
alwaysApply: false
---
# Council of Sages Frontend Project Memory

## Project Overview
This is a React + TypeScript + Vite application designed for cross-platform deployment (web-first with React Native migration path). Focus on mobile-first responsive design, clean architecture, and platform-agnostic business logic.


- **React + TypeScript + Vite** application for AI-powered frontend
- **Cross-platform ready**: Web desktop/mobile responsive + React Native migration path
- **Node.js** with modern tooling (Vite, ESLint, Prettier, Husky)
- **Tailwind CSS** for styling, **React Query** for data fetching, **Zustand** for state management
- **Render** deployment ready with optimized build configuration

## Multi-Platform Strategy

- **Primary**: Responsive web application (desktop + mobile web)
- **Secondary**: Easy migration path to React Native for native mobile apps
- **Design System**: Mobile-first responsive design with touch-friendly interactions
- **Shared Logic**: Business logic, hooks, services, and state management designed for reusability

## Code Structure & Conventions

### Current Web Structure (React Native Migration Ready)

- **`src/components/ui/`** - Web-specific UI components (buttons, inputs, modals)
- **`src/components/common/`** - Web-specific layout components (navigation, layout)
- **`src/screens/`** - Screen-level components (like pages but mobile-friendly naming)
- **`src/hooks/`** - **SHARED**: Custom React hooks (platform-agnostic)
- **`src/services/`** - **SHARED**: API services and external integrations
- **`src/store/`** - **SHARED**: Zustand state management
- **`src/utils/`** - **SHARED**: Pure utility functions
- **`src/types/`** - **SHARED**: TypeScript type definitions
- **`src/assets/`** - Static assets (images, icons, fonts)


---

## ðŸ¤– CLAUDE CODING RULES & STANDARDS

**CRITICAL: Follow these rules strictly when generating code**

### Core Development Principles

- **Mobile-first responsive design** with touch-friendly interfaces
- **Platform-agnostic business logic** - keep hooks, services, store logic separate from UI
- **Functional components with hooks** (React Native compatible)
- **Single responsibility principle** for components
- **Composition over inheritance**
- **Absolute imports** using `@/` alias
- **TypeScript strict mode** requirements
- **Separation of concerns**: UI components don't contain business logic

### Code Style & Formatting

- **TypeScript strict mode** with proper type annotations
- **Prettier** formatting with Tailwind CSS plugin
- **ESLint** with React hooks and TypeScript rules
- **2 spaces** for indentation, **single quotes** for strings
- **PascalCase** for components, **camelCase** for functions/variables
- **Absolute imports** using `@/` paths (`from '@/components/ui/Button'`)

### React & TypeScript Implementation

#### Essential Rules
- **Use TypeScript** - prevents countless bugs and makes refactoring safe
- **Keep components small** - one responsibility per component
- **Use functional components + hooks** - the modern React way
- **Start with local state (useState)** - only lift state up when multiple components need it

#### Performance & Quality
- **Don't create objects/functions in render** - breaks optimization and causes unnecessary re-renders
- **Use custom hooks for reusable logic** - instead of duplicating code
- **Handle loading and error states** - for all async operations

#### Implementation Requirements
- **Functional components** with TypeScript
- **Props interfaces** for all component props
- **React.FC** type for functional components (optional but consistent)
- **Custom hooks** for reusable logic
- **Error boundaries** for production reliability
- **React Query** for all API calls and server state
- **Zustand** for client-side state management

### Component Conventions

- **Single file per component** in appropriate directory
- **Named exports** for components, **default export** for main component
- **Props interface** defined above component (compatible with RN)
- **JSX** with proper TypeScript integration
- **Tailwind classes** with `clsx` and `tailwind-merge` for conditional styling
- **Platform-specific styling**: Use CSS-in-JS patterns that translate well to StyleSheet in RN

### API Integration Standards

- **Axios** with interceptors for API calls
- **Environment variables** prefixed with `VITE_`
- **Type-safe API responses** with proper interfaces
- **Error handling** with proper user feedback
- **React Query** for caching and background updates

### Mobile & Cross-Platform Requirements

#### Responsive Design Rules
- **Mobile-first approach**: Design for mobile screens first, then desktop
- **Touch interactions**: All interactive elements â‰¥ 44px touch targets
- **Responsive breakpoints**: `sm` (640px), `md` (768px), `lg` (1024px), `xl` (1280px)
- **Performance**: Optimize for slower mobile connections and devices
- **Accessibility**: WCAG 2.1 AA compliance for screen readers and assistive technologies

#### Cross-Platform Compatible Patterns
- **Custom hooks**: Keep all business logic in platform-agnostic hooks
- **State management**: Zustand works identically in web and React Native
- **API services**: Axios-based services are easily replaceable with fetch or RN networking
- **Type definitions**: TypeScript interfaces work across platforms
- **Error handling**: ErrorBoundary pattern exists in both React and React Native

#### Mobile Web Optimizations
- **Touch gestures**: Support swipe, tap, long-press interactions
- **Viewport meta tag**: Properly configured for mobile browsers
- **PWA ready**: Service worker support for offline functionality (future enhancement)
- **Performance**: Code splitting, lazy loading, optimized images

---

## ðŸ“š PROJECT REFERENCE

### Development Commands

#### Daily Development
- `npm run dev` - Start development server with HMR (port 3000)
- `npm run build` - Build for production (TypeScript check + Vite build)
- `npm run test` - Run tests with Vitest
- `npm run test:coverage` - Run tests with coverage report

#### Code Quality (run before commits)
- `npm run type-check` - TypeScript compilation check
- `npm run lint` - ESLint validation (0 warnings policy)
- `npm run lint:fix` - Fix ESLint issues automatically
- `npm run format` - Prettier code formatting

